{"version":3,"sources":["serviceWorker.js","timelineService.js","components/timelineCard.jsx","components/timeline.jsx","index.js"],"names":["Boolean","window","location","hostname","match","FileBasedTimelineService","filePath","this","fetch","data","text","result","parser","parse","header","delimiter","skipEmptyLines","CardImageContainer","styled","div","ImageContainerDiv","Image","img","CardTitle","span","h6","CardDescription","p","TimelineItemContainer","MidDiv","TextItems1","TextItems2","TextItems3","InnerRow","CenteringDiv","TimelineCard","props","state","key","index","title","description","photoURL","caption","getInnerRow","className","getImageContainer","getTextItems","src","Component","Container","Timeline","timelineService","timelineEvents","provideTimelineEvents","then","setState","map","event","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e193da5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import parser from 'papaparse';\n\nexport class FileBasedTimelineService {\n  constructor(filePath) {\n    this.filePath = filePath;\n  }\n\n  async provideTimelineEvents() {\n    var data = await fetch(this.filePath);\n    data = await data.text();\n    var result = parser.parse(data, {\n      header: true,\n      delimiter: '\\t',\n      skipEmptyLines: true\n    });\n    return result.data;\n  }\n}","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Markdown from 'react-markdown';\n\nconst CardImageContainer = styled.div`\n  text-align: center;\n  background-color: '#FCF1ED';\n`\n\nconst ImageContainerDiv = styled.div`\n  position: relative;\n  display: inline-block;\n`\n\nconst Image = styled.img`\n  display: block;\n  width: auto;\n  max-width:100%;\n  max-height:100%;\n  border-radius: 2px;\n  max-height: 278px;\n`\n\nconst Caption = styled.span`\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  background: rgba(0,0,0,.5);\n`\n\nconst CardTitle = styled.h6`\n  margin: 10;\n  font-weight: bold;\n  text-align: center;\n  color: #b97f68;\n`\n\nconst CardDescription = styled.p`\n  text-align: center;\n  color: #b97f68;\n`\n\nconst TimelineItemContainer = styled.div`\n`\nconst MidDiv = styled.div`\n  background: #FCF1ED;\n  margin: 10px;\n  padding: 5px;\n`\n\nconst TextItems1 = styled.div`\n  background-image: url(\"./bg1.jpeg\");\n  min-height: 278px;\n  max-height: 278px;\n`\nconst TextItems2 = styled.div`\n  background-image: url(\"./bg2.jpeg\");\n  min-height: 278px;\n  max-height: 278px;\n`\nconst TextItems3 = styled.div`\n  background-image: url(\"./bg3.jpeg\");\n  min-height: 278px;\n  max-height: 278px;\n`\n\nconst InnerRow = styled.div`\n`\n\nconst CenteringDiv = styled.div`\n  min-height: 278px;\n  max-height: 278px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nclass TimelineCard extends Component {\n    constructor(props)\n    {\n      super();\n      this.state = {}\n      this.state.key = props.index;\n      this.state.title = props.title;\n      this.state.description = props.description;\n      this.state.photoURL = props.photoURL;\n      this.state.caption = props.caption;\n    }\n    \n    render() {\n        return (\n          <TimelineItemContainer>\n            <MidDiv>\n              {this.getInnerRow()}\n            </MidDiv>\n          </TimelineItemContainer>\n        );\n    }\n\n    getInnerRow() {\n      return (\n        <InnerRow className=\"row\"> \n          <div className=\"col-xs-1 col-s-1 col-md-1 col-lg-1\"></div>\n          {this.getImageContainer()}\n          {this.getTextItems()}\n          <div className=\"col-xs-1 col-s-1 col-md-1 col-lg-1\"></div>\n        </InnerRow>\n        );\n    }\n\n  getImageContainer()\n  {\n    return (\n      <CardImageContainer className=\"col-xs-5 col-s-5 col-md-5 col-lg-5\">\n        <ImageContainerDiv>\n            <Image src={this.state.photoURL} />\n            {/* <Caption><Markdown>{this.state.caption}</Markdown></Caption> */}\n        </ImageContainerDiv>\n      </CardImageContainer>\n    );\n  }\n\n  getTextItems() {\n    if (this.state.key % 3 == 0) {\n      return (\n        <TextItems1 className=\"col-xs-5 col-s-5 col-md-5 col-lg-5\">\n          <CardTitle>{this.state.title}</CardTitle>\n          <CenteringDiv><CardDescription><Markdown>{this.state.description}</Markdown></CardDescription></CenteringDiv>\n        </TextItems1>\n      );\n    }\n    else if (this.state.key % 3 == 1) {\n      return (\n        <TextItems2 className=\"col-xs-5 col-s-5 col-md-5 col-lg-5\">\n          <CardTitle>{this.state.title}</CardTitle>\n          <CenteringDiv><CardDescription><Markdown>{this.state.description}</Markdown></CardDescription></CenteringDiv>\n        </TextItems2>\n      );\n    }\n    else {\n      return (\n        <TextItems3 className=\"col-xs-5 col-s-5 col-md-5 col-lg-5\">\n          <CardTitle>{this.state.title}</CardTitle>\n          <CenteringDiv><CardDescription><Markdown>{this.state.description}</Markdown></CardDescription></CenteringDiv>\n        </TextItems3>\n      );\n    }\n  }\n}\n \nexport default TimelineCard;","import React, { Component } from 'react';\nimport { FileBasedTimelineService } from '../timelineService.js'\nimport TimelineCard from './timelineCard.jsx'\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  background-color: #FCF1ED;\n`\n\n\nclass Timeline extends Component {\n    constructor()\n    {\n      super();\n      this.state = {}\n      this.timelineService = new FileBasedTimelineService('./content.txt');\n      this.state.timelineEvents = [];\n    }\n\n    componentDidMount()\n    {\n      this.timelineService.provideTimelineEvents().then(\n        timelineEvents => this.setState({ timelineEvents }));\n    }\n\n    render() {\n        return (\n          <Container>\n            {this.state.timelineEvents.map((event, index) => \n             <TimelineCard key={index} index={index} title={event.title} description={event.description} photoURL={event.photoURL} caption={event.caption}/> )}\n          </Container>\n            );\n    }\n}\n \nexport default Timeline;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Timeline from './components/timeline.jsx'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <Timeline/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}